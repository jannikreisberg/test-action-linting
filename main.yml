# A workflow to check for "OOPS" pitfalls of changed ontology files
name: Check Ontology Pitfalls

# Controls when the workflow will run
on:
  # Triggered by PRs to develop
  pull_request:
    types:
      - opened
    paths:
      - '**.owl'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "check-consistency"
  check-pitfalls:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Setup a JVM
      - name: Set up JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14
          
      # Upload OOPs #TOBECHANGED
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: reasoner
          path: openlletcli
         

      # Get changed files and run OOPs pitfalls #TOBECHANGE
      - name: Get files and check pitfalls
        id: checkAllFiles
        run: |
          URL="https://api.github.com/repos/${{github.repository}}/pulls/${{github.event.pull_request.number}}/files"
          FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
          for f in $FILES 
          do 
            if [[ $f == *".owl"* ]]; then
              # HTTP Request to OOPs
              - get_message:
              call: http.post
              args:
                url: http://oops.linkeddata.es/rest
                body:
                some_val: 
                "<?xml version="1.0" encoding="UTF-8"?>
                <OOPSRequest>
                <OntologyURI></OntologyURI>
                <OntologyContent>
                <![CDATA[
        
                ]]>
                </OntologyContent>
                <Pitfalls></Pitfalls>
                <OutputFormat></OutputFormat>
                </OOPSRequest"
              result: the_message.body

      - return_value:
    return: ${the_message.body}
        OOPsResults=get_message 
        result="nopitfalls"
              if [[ $the_message.body != *""* ]]; then
                result="withpitfalls"
              fi
            else
              echo "no owl $f"
            fi
            echo "::set-output name=result::$result"
          done
            
      # Check Pitfalls result -> negative feedback if withpitfalls
      - name: Check Pitfalls result
        if: ${{contains(steps.checkAllFiles.outputs.result, 'withpitfalls')}}
        uses: actions/github-script@v3
        with:
          script: core.setFailed('Your ontology has OOPS classified pitfalls. Please make sure to fix the pitfalls before merging.')
                  core.setFailed(the_message.body)
              
      # Positive feedback if no pitfalls
      - name: Give positive feedback
        run: echo "Your Ontology has no OOPS classified pitfalls."
