# A workflow to check for "OOPS" pitfalls of changed ontology files
name: Check Ontology Pitfalls via Java Steps

# Controls when the workflow will run
on:
  # Triggered by PRs to develop
  pull_request:
    types: [opened, edited]

    paths:
      - '**.owl'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "check pitfalls"
  check-pitfalls:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    #   - uses: actions/checkout@v2
    #   - uses: actions/setup-node@v2
    #    with:
    #      node-version: 14
    #   - run: npm ci
       - run: npm install axios
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/github-script@v6
         with:
          script: |
            console.log("<- Get files and check OOPS! pitfalls ->");
            // const URL = "https://api.github.com/repos/${{github.repository}}/pulls/${{github.event.pull_request.number}}/files"
            const URL = "https://api.github.com/repos/jannikreisberg/test-action-linting/pulls/7/files"
            const OOPSURL = "http://oops.linkeddata.es/rest"
            console.log("<- Analyzing following Pull-Request URL: " + URL + " ->");
            console.log("<- Importing files... ->");
            const file = await github.request(URL);
            console.log("<- Files import sucessful! ->");
            console.log("<- Analyzing files ->");
            console.log("<- RAW-File-URL list of Pull-Request files ->");
            const raw_urls = file.data.map(file => file.raw_url);
            console.log(raw_urls);
            const raw_url_items = raw_urls.values();
            console.log("<- OWL-File Checking of Pull-Request ->");
            for (const raw_url_item of raw_url_items)
            {
            if (raw_url_item.endsWith(".owl") == true)
              {
              console.log("<- This file will be OOPS! checked ->");
              console.log(raw_url_item);
              var checkingfile = await github.request(raw_url_item);
              checkingfile = checkingfile.data;
              console.log("<- OOPS! Return to OWL-File ->");
              var axios = require("axios");
              var xmlBodyStr = `<?xml version="1.0" encoding="UTF-8"?>
                  <OOPSRequest>
                  <OntologyURI></OntologyURI>
                  <OntologyContent>
                  <![CDATA[` + checkingfile + `]]>
                  </OntologyContent>
                  <Pitfalls></Pitfalls>
                  <OutputFormat></OutputFormat>
                  </OOPSRequest`
              var feedback = await axios({
                method: "post",
                url: OOPSURL,
                data: xmlBodyStr
                });
              feedback = feedback.data
              if (feedback.data != "")
                console.log("<- The OWL-File has OOPS!-pitfalls. For more information view the file XY ->");
                // console.log(feedback);
              }
            }