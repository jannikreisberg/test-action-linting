# A workflow to check for "OOPS" pitfalls of changed ontology files
name: Check Ontology Pitfalls via Java Steps

# Controls when the workflow will run
on:
  # Triggered by PRs to develop
  pull_request:
    types: [opened, edited]

    paths:
      - '**.owl'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "check pitfalls"
  check-pitfalls:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/github-script@v6
         with:
          script: |
            // Get changed files and run OOPs pitfalls
            console.log("Get files and check pitfalls");
            // const URL = "https://api.github.com/repos/${{github.repository}}/pulls/${{github.event.pull_request.number}}/files"
            const URL = "https://api.github.com/repos/jannikreisberg/test-action-linting/pulls/7/files"
            console.log("Analyzing following URL ->");
            console.log(URL);
            console.log("Get File list of URL ->");
            const file = await github.request(URL);
            console.log("Show requested Files:");
            console.log(file.data);
            console.log("Files Import Erfolgreich!");
            console.log("GET RAW-File list uf URLs ->");
            for (const [key, value] of Object.entries(file.data.raw_url)) 
              {
              console.log(`${key}: ${value}`);
              }
            console.log("Erfolgreich 2.0");
            console.log(Object.entries(file.data.raw_url))
            console.log("Erfolgreich 3.0");
            console.log(Object.values(file.data.raw_url))
            console.log("Erfolgreich 4.0");
            console.log(Object.entries(file.data.raw_url))
            console.log("Erfolgreich 5.0");
            //
            //
            //
            // console.log(file.raw_url);
            // var fs = require('fs');
            // var files = fs.readdirSync(URL);
            // console.log(files);
            // console.log("Erfolgreich");
            // OOPS HTTP Request with Found Data
            // const OOPSURL = "http://oops.linkeddata.es/rest"
            // console.log(OOPSURL);
            // const HTTPDATA = {
            //  "<?xml version="1.0" encoding="UTF-8"?>
            //    <OOPSRequest>
            //    <OntologyURI>
            //    https://raw.githubusercontent.com/hsu-aut/IndustrialStandard-ODP-DIN8580/master/DIN8580.owl
            //    </OntologyURI>
            //    <OntologyContent>
            //    </OntologyContent>
            //    <Pitfalls></Pitfalls>
            //    <OutputFormat></OutputFormat>
            //    </OOPSRequest>
            // "};
            // console.log(HTTPDATA);
            // http Request Parameters
            // const otherParameters = {
            //   body: Data
            // };
            // fetch(OOPSURL, otherParameters)
            //  .then(data=>{return data.json()})
            //  .then(res=>{console.log(res)})
            //  .catch(error=>console.log(error))
            //  console.log("Erfolgreich 2.0");
            //  FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
            //    for f in $FILES 
            //    do 
            //      if [[ $f == *".owl"* ]]; then
            //      console.log(URL);